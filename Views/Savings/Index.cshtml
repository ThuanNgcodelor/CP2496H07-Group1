@model IEnumerable<CP2496H07Group1.Models.SavingCategory>

    <!-- page-title -->
    <section class="page-title">
        <div class="bg-layer" style="background-image: url('@Url.Content("~/images/background/page-title.jpg")');"></div>
        <div class="pattern-layer" style="background-image: url('@Url.Content("~/images/shape/shape-32.png")');"></div>
        <div class="auto-container">
            <div class="content-box">
                <h1>Saving Categories</h1>
                <ul class="bread-crumb clearfix"></ul>
            </div>
        </div>
    </section>
    <!-- page-title end -->

    <section class="sidebar-page-container blog-list-two pt_120 pb_120">
        <div class="auto-container">
            <div class="row clearfix">
                <div class="col-lg-8 col-md-12 col-sm-12 content-side">
                    <div class="blog-list-content">
                        @if (!Model.Any())
                    {
                        <p>There is no savings category to display. Please check the data in the system.</p>
                    }
                    else
                    {
                        @foreach (var item in Model)
                        {
                        <div class="news-block-one style-two">
                            <div class="inner-box">
                                <div class="image-box">
                                    <figure class="image">
                                        <a href="#"><img src="~/images/news/icon_saving.png" alt="" style="max-width:35%;"></a>
                                    </figure>
                                </div>
                                <div class="content-box">
                                    <div class="upper-box">
                                        <div class="title-box">
                                            <h6><img src="~/images/icons/icon-36.png" alt="">@item.TypeTk</h6>
                                            <h3 style="color: black;">
                                                <a href="#" style="color: black;">
                                                    @item.Money.ToString("N0") $
                                                </a>
                                            </h3>
                                        </div>
                                        <div class="post-date align-3">
                                            <h5><span>Months: </span>@item.Month</h5>
                                            <h6>Description: @item.Description</h6>
                                        </div>
                                    </div>
                                    <div class="lower-box">
                                        <div class="link-box">
                                            <ul class="post-info">
                                                <li><h5><img src="~/images/icons/icon-37.png" alt="">Type @item.TypeTk</h5></li>
                                            </ul>
                                        </div>
                                        <br />
                                        <button type="button" class="theme-btn buy-now-btn" data-id="@item.Id">
                                            <span>Buy Now</span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        }
                    }
                    </div>
                </div>

                <div class="col-lg-4 col-md-12 col-sm-12 sidebar-side">
                    <div class="blog-sidebar ml_20">
                        <div class="sidebar-widget search-widget mb_40">
                            <form method="get" asp-action="Index">
                                <div class="form-group">
                                    <input type="search" name="keyword" placeholder="Search Saving Type..." required>
                                    <button type="submit"><img src="~/images/icons/icon-7.png" alt=""></button>
                                </div>
                            </form>
                        </div>
                        <div class="sidebar-widget category-widget mb_35">
                            <div class="widget-title">
                                <h3>Saving Types</h3>
                            </div>
                            <div class="widget-content">
                                <ul class="category-list clearfix">
                                    @foreach (var type in Model.Select(c => c.TypeTk).Distinct())
                                {
                                    <li><a asp-route-keyword="@type"><span>@type</span><img src="~/images/icons/icon-213.png" alt=""></a></li>
                                }
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Buy Now Modal -->
    <div class="modal fade" id="buyNowModal" tabindex="-1" aria-labelledby="buyNowModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content" style="border: none;">
                <div class="modal-header" style="background-color: #f1f1f1; border-top-left-radius: 15px; border-top-right-radius: 15px;">
                    <h5 class="modal-title" id="buyNowModalLabel" style="color: #000; font-weight: 600;">Buy Saving Package</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" style="filter: invert(1);"></button>
                </div>
                <div class="modal-body p-4">
                    <form id="buyForm">
                        <div class="mb-3">
                            <label class="form-label text-dark">Saving Type</label>
                            <input type="text" class="form-control" id="savingType" readonly>
                        </div>
                        <div class="mb-3">
                            <label class="form-label text-dark">Amount</label>
                            <input type="text" class="form-control" id="savingAmount" readonly>
                        </div>
                        <div class="mb-3">
                            <label class="form-label text-dark">Months</label>
                            <input type="text" class="form-control" id="savingMonths" readonly>
                        </div>
                        <div class="mb-3">
                            <label class="form-label text-dark">Description</label>
                            <input type="text" class="form-control" id="savingDescription" readonly>
                        </div>
                        <div class="mb-3">
                            <label class="form-label text-dark">PIN</label>
                            <input type="password" class="form-control" id="pin" placeholder="Enter your PIN" required>
                        </div>
                        <input type="hidden" id="savingCategoryId">
                        <div class="text-end">
                            <button type="button" class="btn btn-danger" id="proceedBuy" style="padding: 10px 25px;">Proceed to Buy</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Custom Alert -->
    <div id="customAlert" class="custom-alert">
        <div class="custom-alert-content">
            <span id="customAlertMessage">Success!</span>
        </div>
    </div>

    <script>
    document.addEventListener('DOMContentLoaded', function () {
        const buyNowButtons = document.querySelectorAll('.buy-now-btn');
        let isProcessing = false;

        buyNowButtons.forEach(button => {
            button.addEventListener('click', function () {
                const id = parseInt(this.getAttribute('data-id'));
                console.log("BuyNow clicked with id:", id);

                if (!id || id <= 0) {
                    console.error("Invalid data-id on button:", this);
                    showCustomAlert("ID of invalid savings.");
                    return;
                }

                fetch(`/Savings/BuyNow?id=${id}`, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json'
                    }
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! Status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log("BuyNow response:", data);
                        if (!data.success) {
                            showCustomAlert(data.message);
                            return;
                        }

                        document.getElementById('savingType').value = data.typeTk || '';
                        document.getElementById('savingAmount').value = data.money ? data.money.toLocaleString() + " $" : '';
                        document.getElementById('savingMonths').value = data.month || '';
                        document.getElementById('savingDescription').value = data.description || '';
                        document.getElementById('savingCategoryId').value = data.id || '';
                        document.getElementById('pin').value = '';

                        const savingCategoryIdAfterFetch = parseInt(document.getElementById('savingCategoryId').value);
                        console.log("savingCategoryId set in modal:", savingCategoryIdAfterFetch);
                        if (!savingCategoryIdAfterFetch || savingCategoryIdAfterFetch <= 0) {
                            showCustomAlert("Can not take the ID of valid savings from the server.");
                            return;
                        }

                        const modal = new bootstrap.Modal(document.getElementById('buyNowModal'));
                        modal.show();
                    })
                    .catch(error => {
                        console.error("Error in BuyNow:", error);
                        showCustomAlert("Cannot download the savings category data: " + error.message);
                    });
            });
        });

        document.getElementById('proceedBuy').addEventListener('click', function () {
            if (isProcessing) {
                console.log("Request already in progress, ignoring click.");
                return;
            }

            isProcessing = true;
            this.disabled = true;
            this.textContent = "Processing...";

            const savingCategoryIdInput = document.getElementById('savingCategoryId').value;
            const pinInput = document.getElementById('pin').value;

            const savingCategoryId = parseInt(savingCategoryIdInput);
            const pin = parseInt(pinInput);

            console.log("Raw savingCategoryId input:", savingCategoryIdInput, "Parsed savingCategoryId:", savingCategoryId);
            console.log("Raw pin input:", pinInput, "Parsed pin:", pin);

            if (!savingCategoryId || isNaN(savingCategoryId) || savingCategoryId <= 0) {
                console.error("Invalid savingCategoryId in modal:", savingCategoryId);
                showCustomAlert("Invalid savings category. Please try again.");
                isProcessing = false;
                this.disabled = false;
                this.textContent = "Proceed to Buy";
                return;
            }

            if (!pin || isNaN(pin)) {
                console.error("Invalid PIN:", pin);
                showCustomAlert("Please enter a valid PIN.");
                isProcessing = false;
                this.disabled = false;
                this.textContent = "Proceed to Buy";
                return;
            }

            const requestBody = { savingCategoryId: savingCategoryId, pin: pin };
            console.log("Sending PurchaseSaving request with body:", JSON.stringify(requestBody));

            fetch(`/Savings/PurchaseSaving`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify(requestBody)
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(result => {
                    console.log("PurchaseSaving response:", result);
                    showCustomAlert(result.message);
                    if (result.success) {
                        setTimeout(() => {
                            window.location.reload();
                        }, 1500);
                    }
                })
                .catch(error => {
                    console.error("Error in PurchaseSaving:", error);
                    showCustomAlert("Error occurred during the purchase of savings: " + error.message);
                })
                .finally(() => {
                    isProcessing = false;
                    this.disabled = false;
                    this.textContent = "Proceed to Buy";
                });
        });

        function showCustomAlert(message) {
            const alertBox = document.getElementById("customAlert");
            const messageBox = document.getElementById("customAlertMessage");

            messageBox.textContent = message;
            alertBox.style.display = "block";
            alertBox.style.opacity = 1;

            setTimeout(() => {
                alertBox.style.opacity = 0;
                setTimeout(() => {
                    alertBox.style.display = "none";
                }, 500);
            }, 3000);
        }
    });
    </script>

    <style>
        .custom-alert {
            text-align: center;
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background-color: #00c292;
            color: white;
            padding: 15px 25px;
            border-radius: 8px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            display: none;
            z-index: 9999;
            font-size: 16px;
            animation: slideIn 0.5s ease forwards;
        }
    </style>
