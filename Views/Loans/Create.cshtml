@using System.Security.Claims
@using System.Text
@using CP2496H07Group1.Configs.Jwt
@using CP2496H07Group1.Dtos

@model CP2496H07Group1.Dtos.CreateLoanViewModel
<style>
    .appointment-form {
        width: 80%;
        margin: 0 auto;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-bottom: 15px;
    }

    .form-group input {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .icon-box {
        margin-bottom: 5px;
    }

    .message-btn {
        text-align: center;
    }

    .form-group input[type='password'] {
        position: relative;
        display: block;
        width: 100%;
        height: 56px;
        background: #f5f4f4;
        border: 1px solid #f5f4f4;
        font-size: 17px;
        color: #a8a7a7;
        padding: 10px 20px;
        transition: all 500ms ease;
    }

    .validation-error {
        color: red;
        font-size: 14px;
    }

    #confirmationModal {
        display: none;
        position: fixed;
        top: 10%;
        left: 50%;
        transform: translateX(-50%);
        width: 50%;
        max-width: 600px;
        background: white;
        padding: 30px;
        border-radius: 10px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
        z-index: 9999;
    }

</style>

<section class="appointment-section pt_120 pb_120">
    <div class="bg-layer" style="background-image: url(images/background/appointment-bg.jpg);"></div>
    <span class="big-text"> <br>TechBank</span>
    <div class="auto-container">
        <div class="appointment-form">
            <form asp-action="ConfirmLoan" asp-controller="Loans" method="post" id="loanForm">
                <input type="hidden" name="UserId" value="@User.FindFirst(ClaimTypes.NameIdentifier)?.Value" />
                <div class="row clearfix">
                    <div class="sec-title">
                        <span class="sub-title">TeckBank</span>
                        <h2>Create Loans </h2>
                    </div>

                    @Html.ValidationSummary(true, "", new { @class = "validation-error" })

                    <div class="form-group">
                        <label>FullName</label>
                        <h4>@User.FindFirst("FirstName")?.Value @User.FindFirst("LastName")?.Value</h4>
                    </div>

                    <div class="form-group">
                        <label>Amount Borrowed</label>
                        <input type="text" id="displayAmountBorrowed"
                               value="@(Model?.AmountBorrowed ?? 0)"
                               placeholder="AmountBorrowed" required />
                        <input type="hidden" name="AmountBorrowed" id="finalAmount" />

                        @Html.ValidationMessageFor(m => m.AmountBorrowed, "", new { @class = "validation-error" })
                    </div>



                    @{
                    var loanOptions = ViewBag.LoanOptions as List<LoanOptionViewModel>;


                    }

                    <div class="form-group">
                        <label asp-for="LoanOptionId" class="control-label">Loan Option</label>
                        <select asp-for="LoanOptionId" class="form-control w-50" required id="LoanOptionId">
                            <option value="">-- Select Loan Option --</option>
                            @foreach (var option in Model.LoanOptions)
                            {
                            <option value="@option.LoanOptionId"
                                    data-months="@option.LoanDate"
                                    data-rate="@option.InterestRate">
                                @option.DisplayText
                            </option>
                            }
                        </select>
                        <span asp-validation-for="LoanOptionId" class="validation-error"></span>
                    </div>



                    <div class="form-group">
                        <label asp-for="AccountId" class="control-label">Card</label>
                        <select asp-for="AccountId" class="form-control w-100" required id="AccountId">
                            <option value="">------------ Select Card Option ------------</option>
                            @if (Model.Accounts != null)
                            {
                            foreach (var option in Model.Accounts)
                            {
                            <option value="@option.AccountId"
                                    data-account-number="@option.AccountNumber"
                                    data-balance="@option.Balance"
                                    data-vip-type="@option.TypeVip">
                                @option.DisplayText
                                @if (option.TypeVip.HasValue)
                                {
                                <span> - VIP: @option.TypeVip</span>
                                }
                            </option>
                            }
                            }
                        </select>
                        <span asp-validation-for="AccountId" class="validation-error"></span>
                    </div>
                    <div class="col-12">
                        <div class="form-group">
                            <label for="password">Password</label>
                            <input type="password" id="pass" name="pass" placeholder="Enter password" required>
                        </div>
                    </div>



                    <!-- Hidden fields -->
                    <!-- Hidden fields (gộp và bỏ thẻ thừa) -->
                    <input type="hidden" name="AmountBorrowed" id="finalAmount" />
                    <input type="hidden" name="LoanOptionId" id="finalOption" />
                    <input type="hidden" name="pass" id="finalPass" />
                    <input type="hidden" name="MonthlyPayment" id="finalMonthly" />
                    <input type="hidden" name="StartDate" id="finalStartDate" />
                    <input type="hidden" name="EndDate" id="finalEndDate" />
                    <input type="hidden" name="LoanName" id="finalLoanName" />
                    <input type="hidden" name="AccountId" id="finalAccountId" />
                    <input type="hidden" name="ViPId" id="finalVipId" />

                    <div class="message-btn pt_7">
                        <button type="button" class="theme-btn" onclick="showConfirmation(event)">
                            <span>Confirm</span>
                        </button>
                    </div>

                    <div class="message-btn pt_7">
                        <a href="@Url.Action("Index")" class="theme-btn"><span>Cancel</span></a>
                    </div>
                </div>
            </form>
        </div>
    </div>
</section>

<!-- Modal -->
<div id="confirmationModal" style="display:none; position:fixed; top:10%; left:50%; transform:translateX(-50%); width:70%; background:white; padding:30px; border-radius:10px; box-shadow:0 0 20px rgba(0,0,0,0.5); z-index:9999;">
    <h3 style="text-align:center; margin-bottom:20px;">Confirm loan information</h3>

    <div style="font-size: 16px; line-height: 1.8;">
        <p><strong>FullName:</strong> <span id="confirmName"></span></p>
        <p><strong>LoanNumber:</strong> <span id="confirmLoanName"></span></p>
        <p><strong>Card:</strong> <span id="confirmAccount"></span></p>
        <p><strong>Vip:</strong> <span id="confirmVip"></span></p>
        <p><strong>AmountBorrowed:</strong> <span id="confirmAmount"></span></p>
        <p><strong>LoanOption :</strong> <span id="confirmOption"></span></p>
        <p><strong>StartDate:</strong> <span id="confirmStartDate"></span></p>
        <p><strong>EndDate:</strong> <span id="confirmEndDate"></span></p>
        <p><strong>MonthlyPay:</strong> <span id="confirmMonthly"></span></p>
    </div>
    <!-- Dòng này sẽ bị ẩn khỏi giao diện nhưng vẫn tồn tại trong DOM -->


    <p style="display: none;"><strong>Mật khẩu:</strong> <span id="confirmPass"></span></p>
    <div style="margin-top: 30px; display: flex; justify-content: center; gap: 20px;">
        <button type="button"  id="confirmLoanBtn"  class="theme-btn" onclick="submitLoanForm()"><span>Loan Confirmation</span></button>
        <button type="button" class="theme-btn" onclick="hideConfirmationModal()"><span>Cancel</span></button>
    </div>
</div>
<script>
    document.addEventListener("DOMContentLoaded", () => {
        const namel = Math.floor(100000 + Math.random() * 900000).toString().padStart(6, '0');
        document.getElementById("confirmLoanName").innerText = namel;
        document.getElementById("finalLoanName").value = namel;

        const startDateInput = document.getElementById("finalStartDate");
        const endDateInput = document.getElementById("finalEndDate");

        const passInput = document.getElementById("pass");
        const accountSelect = document.getElementById("AccountId");
        const loanOptionSelect = document.getElementById("LoanOptionId");
        const input = document.getElementById("displayAmountBorrowed");

        // Fix lỗi trùng lặp sự kiện input cho amount borrowed
        if (input) {
            input.addEventListener("input", () => {
                let value = input.value.replace(/[^0-9]/g, ""); // chỉ giữ số

                // Xóa số 0 đứng đầu nếu có nhiều chữ số
                if (value.length > 1 && value.startsWith("0")) {
                    value = value.replace(/^0+/, "");
                }

                // Không cho phép nhập số âm
                // Format lại: thêm dấu phẩy mỗi 3 số
                input.value = value ? parseInt(value).toLocaleString("vi-VN") : "";
            });

            input.addEventListener("keydown", (e) => {
                if (e.key === "-" || e.key === "e") {
                    e.preventDefault(); // chặn nhập dấu trừ hoặc số khoa học
                }
            });
        }

        function addMonthsToDate(date, months) {
            const newDate = new Date(date);
            const day = newDate.getDate();
            newDate.setMonth(newDate.getMonth() + months);

            // Nếu ngày sau khi cộng tháng bị lệch tháng (do tháng mới không có đủ ngày)
            if (newDate.getDate() < day) {
                newDate.setDate(0); // Đặt về cuối tháng trước
            }
            return newDate;
        }

        // Set StartDate to today nếu chưa có
        if (startDateInput && !startDateInput.value) {
            const today = new Date();
            startDateInput.value = today.toISOString().split('T')[0];
        }

        // Auto-tính EndDate khi chọn gói vay
        if (loanOptionSelect) {
            loanOptionSelect.addEventListener("change", () => {
                const selectedOption = loanOptionSelect.options[loanOptionSelect.selectedIndex];
                const months = parseInt(selectedOption.getAttribute("data-months"));
                if (!isNaN(months) && startDateInput && endDateInput) {
                    if (!startDateInput.value) {
                        const today = new Date();
                        startDateInput.value = today.toISOString().split('T')[0];
                    }
                    const start = new Date(startDateInput.value);
                    const end = addMonthsToDate(start, months);
                    endDateInput.value = end.toISOString().split('T')[0];
                }
            });
        }

        // Hàm mở modal xác nhận
        window.showConfirmation = function (event) {
            event.preventDefault();

            const amountStr = document.getElementById("displayAmountBorrowed").value;
            const amount = parseFloat(amountStr.replace(/[^\d]/g, ''));
            const pass = passInput.value.trim();

            // Lấy vipType từ AccountId nếu có
            const selectedAccount = accountSelect.options[accountSelect.selectedIndex];
            const vipType = selectedAccount?.getAttribute("data-vip-type");

            // Kiểm tra số tiền vay có vượt quá giới hạn của VIP không
            const roundedThousands = Math.floor(amount / 1000); // ví dụ 3999 → 3
            if (!vipType || isNaN(parseInt(vipType))) {
                alert("You do not have VIP yet. Please purchase VIP package to continue borrowing money.");
                return;
            }
            if (roundedThousands > parseInt(vipType)) {
                alert(`Loan amount exceeds VIP limit ${vipType}.
                    Please buy more vip.`);
                return;
            }

            // Kiểm tra số tiền vay có dưới 500 không
            if (amount < 500) {
                alert("Loan amount must be 500 or more.");
                window.location.href = "@Url.Action("Create", "Loans")"; // Redirect back to create loan page
                return; // Prevent modal from being shown
            }

            // Kiểm tra các điều kiện hợp lệ trước khi hiển thị modal
            const form = document.querySelector("form");
            const confirmationModal = document.getElementById("confirmationModal");

            if (form.checkValidity()) {
                confirmationModal.style.display = "block";
            } else {
                form.reportValidity();
            }

            if (!loanOptionSelect.value) {
                alert("Please select loan package.");
                return;
            }

            if (!pass) {
                alert("Please enter password.");
                return;
            }

            const selectedOption = loanOptionSelect.options[loanOptionSelect.selectedIndex];
            const months = parseInt(selectedOption.getAttribute("data-months"));
            const interestRate = parseFloat(selectedOption.getAttribute("data-rate"));

            if (!months || isNaN(interestRate)) {
                alert("Invalid loan package information.");
                return;
            }

            if (!startDateInput.value) {
                const today = new Date();
                startDateInput.value = today.toISOString().split('T')[0];
            }

            if (!endDateInput.value) {
                const start = new Date(startDateInput.value);
                const end = addMonthsToDate(start, months);
                endDateInput.value = end.toISOString().split('T')[0];
            }

            const totalInterest = amount * interestRate;
            const totalPayable = amount + totalInterest;
            const monthlyPayment = Math.ceil(totalPayable / months);

            const startDate = new Date(startDateInput.value);
            const endDate = new Date(endDateInput.value);
            const userFullName = "@(User.FindFirst("FirstName")?.Value) @(User.FindFirst("LastName")?.Value)";

            // Gán giá trị vào modal
            document.getElementById("confirmName").innerText = userFullName;
            document.getElementById("confirmAmount").innerText = "$" + amount.toFixed(2);

            document.getElementById("confirmOption").innerText = selectedOption.text;
            document.getElementById("confirmPass").innerText = pass;
            document.getElementById("confirmMonthly").innerText = "$" + monthlyPayment.toFixed(2) + " / Month";

            document.getElementById("confirmStartDate").innerText = startDate.toLocaleDateString("en-US");
            document.getElementById("confirmEndDate").innerText = endDate.toLocaleDateString("en-US");
            document.getElementById("confirmAccount").innerText = selectedAccount.getAttribute("data-account-number");
            document.getElementById("confirmVip").innerText = vipType ? `VIP ${vipType}` : "None";


            // Hidden fields
            document.getElementById("finalAmount").value = amount;
            document.getElementById("finalOption").value = loanOptionSelect.value;
            document.getElementById("finalPass").value = pass;
            document.getElementById("finalMonthly").value = monthlyPayment;
            document.getElementById("finalStartDate").value = startDateInput.value;
            document.getElementById("finalEndDate").value = endDateInput.value;
            document.getElementById("finalAccountId").value = accountSelect.value;
            document.getElementById("finalVipId").value = vipType;

            // Show modal
            confirmationModal.style.display = "block";
        };


        // Hàm submit sau khi xác nhận
        window.submitLoanForm = function () {
            const confirmButton = document.getElementById("confirmLoanBtn");

            // Vô hiệu hóa nút và đổi nội dung hiển thị
            confirmButton.disabled = true;
            confirmButton.innerHTML = "<span>Processing...</span>";
            document.getElementById("loanForm").submit();
        };

        // Hàm đóng modal
        window.hideConfirmationModal = function () {
            document.getElementById("confirmationModal").style.display = "none";
        };
    });
</script>