@model CP2496H07Group1.Models.User
<style>
    .appointment-form {
        width: 80%;
        margin: 0 auto;
    }
    .form-group {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-bottom: 15px;
    }
    .form-group input {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }
    .icon-box {
        margin-bottom: 5px;
    }
    .message-btn {
        text-align: center;
    }
    .form-group input[type='password'] {
        position: relative;
        display: block;
        width: 100%;
        height: 56px;
        background: #f5f4f4;
        border: 1px solid #f5f4f4;
        font-size: 17px;
        color: #a8a7a7;
        padding: 10px 20px;
        transition: all 500ms ease;
    }
    .validation-error {
        color: red;
        font-size: 14px;
    }
</style>

<section class="appointment-section pt_120 pb_120">
    <div class="bg-layer" style="background-image: url('@Url.Content("~/images/background/appointment-bg.jpg")');"></div>
    <div class="pattern-layer" style="background-image: url('@Url.Content("~/images/shape/shape-32.png")');"></div>
    <span class="big-text">REGISTER <br>TechBank</span>
    <div class="auto-container">
        <div class="appointment-form">
            <form asp-action="Register" method="post">
                <div class="row clearfix">
                    <div class="sec-title">
                        <span class="sub-title">Online Banking</span>
                        <h2>REGISTER</h2>
                    </div>

                    <div class="col-lg-12 col-md-12 col-sm-12 single-column">
                        @Html.ValidationSummary(true, "", new { @class = "validation-error" })
                    </div>

                    <div class="col-lg-6 col-md-12 col-sm-12 single-column">
                        <div class="form-group">
                            <label>First Name</label>
                            <input type="text" name="FirstName" placeholder="First Name" value="@Model?.FirstName" />
                            @Html.ValidationMessageFor(m => m.FirstName, "", new { @class = "validation-error" })
                        </div>
                    </div>
                    <div class="col-lg-6 col-md-12 col-sm-12 single-column">
                        <div class="form-group">
                            <label>Last Name</label>
                            <input type="text" name="LastName" placeholder="Last Name" value="@Model?.LastName" />
                            @Html.ValidationMessageFor(m => m.LastName, "", new { @class = "validation-error" })
                        </div>
                    </div>
                    <div class="col-lg-12 col-md-12 col-sm-12 single-column">
                        <div class="form-group">
                            <label>Email</label>
                            <input type="email" name="Email" placeholder="Email address" value="@Model?.Email" required />
                            @Html.ValidationMessageFor(m => m.Email, "", new { @class = "validation-error" })
                        </div>
                    </div>
                    <div class="col-lg-12 col-md-12 col-sm-12 single-column">
                        <div class="form-group">
                            <label>Phone</label>
                            <input type="text" name="PhoneNumber" placeholder="Phone number" value="@Model?.PhoneNumber" required />
                            @Html.ValidationMessageFor(m => m.PhoneNumber, "", new { @class = "validation-error" })
                        </div>
                    </div>
                    <div class="col-lg-12 col-md-12 col-sm-12 single-column">
                        <div class="form-group">
                            <label>Address</label>
                            <input type="text" name="Address" placeholder="Your address" value="@Model?.Address" required />
                            @Html.ValidationMessageFor(m => m.Address, "", new { @class = "validation-error" })
                        </div>
                    </div>
                    <div class="col-lg-12 col-md-12 col-sm-12 single-column">
                        <div class="form-group">
                            <label>Identity</label>
                            <input type="text" id="identity" name="Identity" placeholder="Your identity" value="@Model?.Identity" required />
                            <span id="identityError" class="validation-error"></span>
                            @Html.ValidationMessageFor(m => m.Identity, "", new { @class = "validation-error" })
                        </div>
                    </div>
                    <div class="col-lg-12 col-md-12 col-sm-12 single-column">
                        <div class="form-group">
                            <label>Password</label>
                            <input type="password" id="password" name="PasswordHash" placeholder="Enter password" required />
                            <span id="passwordError" class="validation-error"></span>
                            @Html.ValidationMessageFor(m => m.PasswordHash, "", new { @class = "validation-error" })
                        </div>
                    </div>
                    <div class="col-lg-12 col-md-12 col-sm-12 single-column">
                        <div class="form-group">
                            <label>Confirm Password</label>
                            <input type="password" id="confirmPassword" name="ConfirmPassword" placeholder="Confirm password" required />
                            <span id="passwordMatchError" class="validation-error"></span>
                        </div>
                    </div>


                    <div class="col-lg-12 col-md-12 col-sm-12 single-column">
                        <div class="message-btn pt_7">
                            <button type="submit" id="submitBtn" class="theme-btn"><span>Register</span></button>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</section>

<script>
    const passwordInput = document.getElementById("password");
    const confirmPasswordInput = document.getElementById("confirmPassword");
    const errorSpan = document.getElementById("passwordMatchError");
    const passwordErrorSpan = document.getElementById("passwordError");
    const identityInput = document.getElementById("identity");
    const identityErrorSpan = document.getElementById("identityError");

    function validatePasswordMatch() {
        if (passwordInput.value !== confirmPasswordInput.value) {
            errorSpan.textContent = "Passwords and confirm password do not match.";
        } else {
            errorSpan.textContent = "";
        }
    }

    function validatePassword() {
        const password = passwordInput.value;

        const passwordValid = password.length > 6 && /[A-Z]/.test(password);

        if (!passwordValid) {
            passwordErrorSpan.textContent = "Password must be at least 6 characters long and contain at least one uppercase letter.";
        } else {
            passwordErrorSpan.textContent = "";
        }
    }
    function validateIdentity() {
        const identity = identityInput.value;

        const identityValid = /^\d{12}$/.test(identity); 

        if (!identityValid) {
            identityErrorSpan.textContent = "Identity must be exactly 12 digits and cannot contain letters.";
        } else {
            identityErrorSpan.textContent = "";
        }
    }

    passwordInput.addEventListener("input", validatePassword);
    confirmPasswordInput.addEventListener("input", validatePasswordMatch);
    identityInput.addEventListener("input", validateIdentity);

    const form = document.querySelector("form");
    const submitBtn = document.getElementById("submitBtn");

    form.addEventListener("submit", function (e) {
        // Ngăn submit nếu còn lỗi client
        if (
            passwordErrorSpan.textContent ||
            errorSpan.textContent ||
            identityErrorSpan.textContent
        ) {
            e.preventDefault();
            return;
        }

        // Ngăn nhấn nhiều lần
        submitBtn.disabled = true;
        submitBtn.innerHTML = "<span>Processing...</span>";
    });


</script>

