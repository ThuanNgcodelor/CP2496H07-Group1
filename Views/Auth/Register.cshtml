@model CP2496H07Group1.Models.User
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/css/intlTelInput.min.css"/>

<style>
    .appointment-form {
        width: 80%;
        margin: 0 auto;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-bottom: 15px;
    }

    .form-group input {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .icon-box {
        margin-bottom: 5px;
    }

    .message-btn {
        text-align: center;
    }

    .form-group input[type='tel'],
    .form-group input[type='password'] {
        position: relative;
        display: block;
        width: 100%;
        height: 56px;
        background: #f5f4f4;
        border: 1px solid #f5f4f4;
        font-size: 17px;
        color: #a8a7a7;
        padding: 10px 20px;
        transition: all 500ms ease;
    }

    .validation-error {
        color: red;
        font-size: 14px;
    }
</style>

<section class="appointment-section pt_120 pb_120">
    <div class="bg-layer"
         style="background-image: url('@Url.Content("~/images/background/appointment-bg.jpg")');"></div>
    <div class="pattern-layer" style="background-image: url('@Url.Content("~/images/shape/shape-32.png")');"></div>
    <span class="big-text">REGISTER <br>TechBank</span>
    <div class="auto-container">
        <div class="appointment-form">
            <form asp-action="Register" method="post">
                <div class="row clearfix">
                    <div class="sec-title">
                        <span class="sub-title">TeckBank</span>
                        <h2>REGISTER</h2>
                    </div>

                    <div class="col-lg-12 col-md-12 col-sm-12 single-column">
                        @Html.ValidationSummary(true, "", new { @class = "validation-error" })
                    </div>

                    <div class="col-lg-6 col-md-12 col-sm-12 single-column">
                        <div class="form-group">
                            <label>First Name</label>
                            <input type="text" name="FirstName" placeholder="First Name" value="@Model?.FirstName"/>
                            @Html.ValidationMessageFor(m => m.FirstName, "", new { @class = "validation-error" })
                        </div>
                    </div>
                    <div class="col-lg-6 col-md-12 col-sm-12 single-column">
                        <div class="form-group">
                            <label>Last Name</label>
                            <input type="text" name="LastName" placeholder="Last Name" value="@Model?.LastName"/>
                            @Html.ValidationMessageFor(m => m.LastName, "", new { @class = "validation-error" })
                        </div>
                    </div>
                    <div class="col-lg-12 col-md-12 col-sm-12 single-column">
                        <div class="form-group">
                            <label>Phone</label>
                            <input type="tel" id="phone" name="PhoneNumber" placeholder="Phone number" style="width: 465px" required/>
                            <span id="phoneError" class="validation-error"></span>
                            @Html.ValidationMessageFor(m => m.PhoneNumber, "", new { @class = "validation-error" })
                        </div>
                    </div>
                    <div class="col-lg-12 col-md-12 col-sm-12 single-column">
                        <div class="form-group">
                            <label>Email</label>
                            <input type="email" name="Email" placeholder="Email address" value="@Model?.Email"
                                   required/>
                            @Html.ValidationMessageFor(m => m.Email, "", new { @class = "validation-error" })
                        </div>
                    </div>
                    <div class="col-lg-12 col-md-12 col-sm-12 single-column">
                        <div class="form-group">
                            <label>Address</label>
                            <input type="text" name="Address" placeholder="Your address" value="@Model?.Address"
                                   required/>
                            @Html.ValidationMessageFor(m => m.Address, "", new { @class = "validation-error" })
                        </div>
                    </div>
                    <div class="col-lg-12 col-md-12 col-sm-12 single-column">
                        <div class="form-group">
                            <label>Identity</label>
                            <input type="text" id="identity" name="Identity" placeholder="Your identity"
                                   value="@Model?.Identity" required/>
                            <span id="identityError" class="validation-error"></span>
                            @Html.ValidationMessageFor(m => m.Identity, "", new { @class = "validation-error" })
                        </div>
                    </div>
                    <div class="col-lg-12 col-md-12 col-sm-12 single-column">
                        <div class="form-group">
                            <label>Password</label>
                            <input type="password" id="password" name="PasswordHash" placeholder="Enter password"
                                   required/>
                            <span id="passwordError" class="validation-error"></span>
                            @Html.ValidationMessageFor(m => m.PasswordHash, "", new { @class = "validation-error" })
                        </div>
                    </div>
                    <div class="col-lg-12 col-md-12 col-sm-12 single-column">
                        <div class="form-group">
                            <label>Confirm Password</label>
                            <input type="password" id="confirmPassword" name="ConfirmPassword"
                                   placeholder="Confirm password" required/>
                            <span id="passwordMatchError" class="validation-error"></span>
                        </div>
                    </div>


                    <div class="col-lg-12 col-md-12 col-sm-12 single-column">
                        <div class="message-btn pt_7">
                            <button type="submit" id="submitBtn" class="theme-btn"><span>Register</span></button>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</section>
<script src="https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/intlTelInput.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/utils.js"></script>

<script>
    const passwordInput = document.getElementById("password");
    const confirmPasswordInput = document.getElementById("confirmPassword");
    const identityInput = document.getElementById("identity");
    const submitBtn = document.getElementById("submitBtn");
    const form = document.querySelector("form");

    const errorSpan = document.getElementById("passwordMatchError");
    const passwordErrorSpan = document.getElementById("passwordError");
    const identityErrorSpan = document.getElementById("identityError");

    const firstNameInput = document.querySelector("input[name='FirstName']");
    const lastNameInput = document.querySelector("input[name='LastName']");

    const firstNameError = document.createElement("span");
    const lastNameError = document.createElement("span");
    const phoneNumberError = document.createElement("span");
    const phoneNumberInput = document.querySelector("input[name='PhoneNumber']");

    firstNameError.className = lastNameError.className = "validation-error";
    phoneNumberError.className = "validation-error";

    firstNameInput.parentElement.appendChild(firstNameError);
    lastNameInput.parentElement.appendChild(lastNameError);

    const emailInput = document.querySelector("input[name='Email']");
    const emailError = document.createElement("span");
    emailError.className = "validation-error";
    emailInput.parentElement.appendChild(emailError);
    phoneNumberInput.parentElement.appendChild(phoneNumberError);
    


    const phoneInputField = document.querySelector("#phone");
    const phoneError = document.getElementById("phoneError");

    const phoneInput = window.intlTelInput(phoneInputField, {
        initialCountry: "vn",
        preferredCountries: ["vn", "us", "kr", "jp", "fr", "de"],
        separateDialCode: true,
        utilsScript: "https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/utils.js"
    });


    function validateEmail() {
        const emailRegex = /^[^\s@@]+@@[^\s@@]+\.(com|net|org|edu|gov|mil|vn|info|co)$/i;
        const isValid = emailRegex.test(emailInput.value.trim());
        emailError.textContent = !isValid
            ? "Email must be a valid format and end with .com, .net, .vn, etc."
            : "";
    }

    emailInput.addEventListener("input", validateEmail);


    function validatePasswordMatch() {
        errorSpan.textContent = passwordInput.value !== confirmPasswordInput.value
            ? "Passwords and confirm password do not match."
            : "";
    }

    // function validatePhone() {
    //     const phone = phoneNumberInput.value.trim();
    //     const phoneRegex = /^\d{1,15}$/;
    //     phoneNumberError.textContent = !phoneRegex.test(phone)
    //         ? "Phone number must contain only digits and be no more than 15 digits long."
    //         : "";
    // }
    function validatePhone() {
        if (!phoneInput.isValidNumber()) {
            phoneError.textContent = "Số điện thoại không hợp lệ.";
        } else {
            phoneError.textContent = "";
        }
    }


    function validatePassword() {
        const password = passwordInput.value;
        const passwordValid = password.length > 6 && /[A-Z]/.test(password);
        passwordErrorSpan.textContent = !passwordValid
            ? "Password must be at least 6 characters long and contain at least one uppercase letter."
            : "";
    }

    function validateIdentity() {
        const identityValid = /^\d{12}$/.test(identityInput.value);
        identityErrorSpan.textContent = !identityValid
            ? "Identity must be exactly 12 digits and cannot contain letters."
            : "";
    }

    function validateFirstName() {
        const onlyLetters = /^[A-Za-zÀ-ỹ\s]+$/.test(firstNameInput.value);
        firstNameError.textContent = !onlyLetters
            ? "First name must contain only letters."
            : "";
    }

    function validateLastName() {
        const onlyLetters = /^[A-Za-zÀ-ỹ\s]+$/.test(lastNameInput.value);
        lastNameError.textContent = !onlyLetters
            ? "Last name must contain only letters."
            : "";
    }

    passwordInput.addEventListener("input", validatePassword);
    confirmPasswordInput.addEventListener("input", validatePasswordMatch);
    identityInput.addEventListener("input", validateIdentity);
    firstNameInput.addEventListener("input", validateFirstName);
    lastNameInput.addEventListener("input", validateLastName);
    phoneNumberInput.addEventListener("input", validatePhone);

    form.addEventListener("submit", function (e) {
        phoneInputField.value = phoneInput.getNumber();
        validatePassword();
        validatePasswordMatch();
        validateIdentity();
        validateFirstName();
        validateLastName();
        validateEmail();
        validatePhone();

        if (
            passwordErrorSpan.textContent ||
            errorSpan.textContent ||
            identityErrorSpan.textContent ||
            firstNameError.textContent ||
            lastNameError.textContent ||
            emailError.textContent ||
            phoneNumberError.textContent
        ) {
            e.preventDefault();
            return;
        }

        submitBtn.disabled = true;
        submitBtn.innerHTML = "<span>Processing...</span>";
    });
</script>