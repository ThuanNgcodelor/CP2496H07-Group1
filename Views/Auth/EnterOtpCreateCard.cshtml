@using System.Security.Claims
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model CP2496H07Group1.Models.EnterOtpViewModel
<style>
    .appointment-form {
        width: 80%;
        margin: 0 auto;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-bottom: 15px;
    }

    .form-group input {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .icon-box {
        margin-bottom: 5px;
    }

    .message-btn {
        text-align: center;
    }

    .form-group input[type='password'] {
        position: relative;
        display: block;
        width: 100%;
        height: 56px;
        background: #f5f4f4;
        border: 1px solid #f5f4f4;
        font-size: 17px;
        color: #a8a7a7;
        padding: 10px 20px;
        transition: all 500ms ease;
    }

</style>
<section class="appointment-section pt_120 pb_120">
    <div class="bg-layer"
         style="background-image: url('@Url.Content("~/images/background/appointment-bg.jpg")');"></div>
    <div class="pattern-layer" style="background-image: url('@Url.Content("~/images/shape/shape-32.png")');"></div>
    <span class="big-text">ENTER OPT <br>TechBank</span>
    <div class="auto-container">
        <div class="appointment-form">
            <form asp-action="EnterOtpCreateCard" asp-controller="Auth" method="post">
                <input type="hidden" id="userId" name="UserId"
                       value="@(ViewData["UserId"] ?? User.FindFirst(ClaimTypes.NameIdentifier)?.Value)"/>

                <div class="row clearfix">
                    <div class="sec-title">
                        <span class="sub-title">Online Banking</span>
                        <h2>Enter OTP</h2>
                    </div>

                    @if (TempData["Message"] != null)
                    {
                        <div class="col-12">
                            <div class="alert alert-success alert-dismissible fade show text-center" role="alert">
                                @TempData["Message"]
                                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                        </div>
                    }

                    <div class="col-12">
                        <div class="form-group">
                            <div class="icon-box">
                                <img src="images/icons/icon-223.png" alt="">
                            </div>
                            <label for="otp">OTP</label>
                            <input
                                type="text"
                                id="otp"
                                name="otp"
                                placeholder="Enter OTP"
                                pattern="\d{6}"
                                maxlength="6"
                                minlength="6"
                                inputmode="numeric"
                                required
                                title="OTP must be 6 digits"
                                class="form-control"/>

                            <!-- Hiển thị thông báo lỗi dưới input -->
                            <span asp-validation-for="Otp" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="col-12">
                        <div class="message-btn pt_7">
                            <button type="submit" class="theme-btn"><span>Submit OTP</span></button>
                        </div>
                    </div>

                    <div class="col-12 text-center mt-2">
                        <span id="countdown" class="text-muted">Resend OTP in <strong>30</strong> seconds</span>
                        <button id="resendBtn" type="button" class="btn btn-link" style="display:none;"
                                onclick="resendOtp()">Resend OTP
                        </button>
                        <span id="resendLimitMessage" class="text-danger" style="display:none;">
                            You have reached the maximum number of OTP resend attempts. Please try again in 15 minute.
                        </span>
                    </div>

                </div>
            </form>

        </div>
    </div>
</section>
<div id="customAlert" class="custom-alert">
    <div class="custom-alert-content">
        <span id="customAlertMessage">Success!</span>
    </div>
</div>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script>
    document.getElementById('otp').addEventListener('input', function (e) {
        this.value = this.value.replace(/\D/g, '');
    });
</script>


<script>
    let resendData = JSON.parse(localStorage.getItem('otpResendDataCreateCard')) || {
        attempts: 0,
        timestamp: Date.now()
    };
    let resendAttempts = resendData.attempts;
    const maxResendAttempts = 3;
    const ttl = 15 * 60 * 1000; // 14'

    let countdownTime = 15;
    const countdownDisplay = document.getElementById("countdown");
    const resendBtn = document.getElementById("resendBtn");
    const resendLimitMessage = document.getElementById("resendLimitMessage");

    // Check if resend data expired
    if (Date.now() - resendData.timestamp > ttl) {
        resendAttempts = 0;
        localStorage.setItem('otpResendDataCreateCard', JSON.stringify({
            attempts: 0,
            timestamp: Date.now()
        }));
    }

    // chinh lai the a
    if (resendAttempts >= maxResendAttempts) {
        countdownDisplay.style.display = "none";
        resendBtn.style.display = "none";
        resendLimitMessage.style.display = "inline";
    }

    // Thoi gian tru di trong 30s
    const countdownInterval = setInterval(() => {
        countdownTime--;
        countdownDisplay.innerHTML = `Resend OTP in <strong>${countdownTime}</strong> seconds`;

        if (countdownTime <= 0) {
            clearInterval(countdownInterval);
            countdownDisplay.style.display = "none";
            if (resendAttempts < maxResendAttempts) {
                resendBtn.style.display = "inline-block";
            } else {
                resendLimitMessage.style.display = "inline";
            }
        }
    }, 1000);

    // Warn before reload
    // window.addEventListener('beforeunload', function (e) {
    //     if (resendAttempts < maxResendAttempts) {
    //         const confirmationMessage = 'Reloading the page may reset your OTP progress. Are you sure?';
    //         (e || window.event).returnValue = confirmationMessage;
    //         return confirmationMessage;
    //     }
    // });

    async function resendOtp() {
        try {
            resendBtn.disabled = true;
            const userId = document.getElementById("userId").value;
            const response = await fetch('/Auth/ResendOtpCreateCard', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: `userId=${encodeURIComponent(userId)}`
            });

            const data = await response.json();
            console.log(data);

            if (data.success) {
                resendAttempts++;
                localStorage.setItem('otpResendDataCreateCard', JSON.stringify({
                    attempts: resendAttempts,
                    timestamp: Date.now()
                }));

                // Reset countdown
                countdownTime = 15;
                countdownDisplay.style.display = "inline-block";
                resendBtn.style.display = "none";
                resendLimitMessage.style.display = "none";

                const interval = setInterval(() => {
                    countdownTime--;
                    countdownDisplay.innerHTML = `Resend OTP in <strong>${countdownTime}</strong> seconds`;
                    if (countdownTime <= 0) {
                        clearInterval(interval);
                        countdownDisplay.style.display = "none";
                        if (resendAttempts < maxResendAttempts) {
                            resendBtn.style.display = "inline-block";
                            resendBtn.disabled = false; // Re-enable the button
                        } else {
                            resendLimitMessage.style.display = "inline";
                        }
                    }
                }, 1000);
                showCustomAlert("OTP resent successfully. Please check your email for the OTP.")
            } else {
                alert("Failed to resend OTP. Please try again later.");
                resendBtn.disabled = false; // Re-enable the button on failure
            }
        } catch (error) {
            console.error('Error:', error);
            alert("An error occurred while resending OTP. Please try again later.");
            resendBtn.disabled = false; // Re-enable the button on error
        }
    }

    function showCustomAlert(message) {
        const alertBox = document.getElementById("customAlert");
        const messageBox = document.getElementById("customAlertMessage");

        messageBox.textContent = message;
        alertBox.style.display = "block";

        setTimeout(() => {
            alertBox.style.display = "none";
        }, 3000);
    }

</script>

<style>
    .custom-alert {
        text-align: center;
        position: fixed;
        top: 20px;
        left: 50%;
        transform: translateX(-50%);
        background-color: #00c292;
        color: white;
        padding: 15px 25px;
        border-radius: 8px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        display: none;
        z-index: 9999;
        font-size: 16px;
        animation: slideIn 0.5s ease forwards;
    }
</style>